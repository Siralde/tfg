[{"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/index.js":"1","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/aws-exports.js":"2","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/App.js":"3","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/layout.js":"4","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/header.js":"5","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/HomePage.js":"6","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/RoundDetailsPage.js":"7","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/web3.js":"8","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/questions.js":"9","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/campaignFactory.js":"10","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/graphql/queries.js":"11","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/graphql/mutations.js":"12","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/CreateRoundPage.js":"13","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/CreateCampaignPage.js":"14","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/InvestPage.js":"15","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/campaign.js":"16"},{"size":319,"mtime":1609935754323,"results":"17","hashOfConfig":"18"},{"size":497,"mtime":1609930143659,"results":"19","hashOfConfig":"18"},{"size":320,"mtime":1597615028890,"results":"20","hashOfConfig":"18"},{"size":2550,"mtime":1609876623150,"results":"21","hashOfConfig":"18"},{"size":1376,"mtime":1609872930904,"results":"22","hashOfConfig":"18"},{"size":1462,"mtime":1609935890491,"results":"23","hashOfConfig":"18"},{"size":8168,"mtime":1609939691718,"results":"24","hashOfConfig":"18"},{"size":399,"mtime":1601982506480,"results":"25","hashOfConfig":"18"},{"size":586,"mtime":1597841634570,"results":"26","hashOfConfig":"18"},{"size":644,"mtime":1609930489810,"results":"27","hashOfConfig":"18"},{"size":1002,"mtime":1609929831713,"results":"28","hashOfConfig":"18"},{"size":1534,"mtime":1609929831762,"results":"29","hashOfConfig":"18"},{"size":8266,"mtime":1609930524615,"results":"30","hashOfConfig":"18"},{"size":9393,"mtime":1609876674486,"results":"31","hashOfConfig":"18"},{"size":1727,"mtime":1609779989984,"results":"32","hashOfConfig":"18"},{"size":192,"mtime":1609936669054,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3salhw",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/index.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/aws-exports.js",[],["68","69"],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/App.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/layout.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/header.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/HomePage.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/RoundDetailsPage.js",["70"],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/web3.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/questions.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/campaignFactory.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/graphql/queries.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/graphql/mutations.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/CreateRoundPage.js",["71"],"import React, { Component } from 'react';\nimport web3 from '../ethereum/web3.js';\nimport CampaignFactory from '../ethereum/campaignFactory';\nimport DateTimePicker from 'react-datetime-picker';\nimport { Link } from 'react-router-dom';\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { createRoundDetails as CreateRoundDetails } from '../graphql/mutations'\nimport { \n  Header, \n  Icon, \n  Input, \n  Label, \n  Button, \n  Form,\n  Message,\n  Dimmer,\n  Segment,\n  Loader\n} from 'semantic-ui-react';\n\nconst zeros = \"0x000000000000000000000000\";\n\nclass InvestPage extends Component {\n  \n  state = {\n    etherToCollect: 0,\n    tokenName: '' ,\n    tokenSymbol: '',\n    tokenSupply: '',\n    tokenValue: 0,\n    campaignOpeningTime: new Date(),\n    campaignClosingTime: new Date(),\n    loading: false,\n    finish: false\n  }\n\n  onChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  openingTimeHandler = (openingTime) => {\n    this.setState({ campaignOpeningTime: openingTime });\n  }\n\n  closingTimeHandler = (closingTime) => {\n    this.setState({ campaignClosingTime: closingTime });\n  }\n\n  convertDateToSeconds(date)\n  {\n    let seconds = parseInt(new Date(date).getTime()/1000) + 120;\n    return seconds;\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    // const campaign = Campaign(this.props.address);\n    const { etherToCollect, \n            tokenName, \n            tokenSymbol, \n            tokenSupply, \n            tokenValue, \n            campaignOpeningTime, \n            campaignClosingTime \n          } = this.state;\n\n    this.setState({ loading: true, errorMessage: '' });\n\n    try \n    {\n      const account = await window.ethereum.request(\n        { method: 'eth_requestAccounts' }\n      );\n    \n      const campaignFactory = CampaignFactory(\n        // '0x55Cb7280531F02E398F603BbCc9430734b4B88dA',\n        '0x43b8cE6c399483F4203F38Ecfd49Bd59F3A04acb', \n        web3\n      );\n\n      const createCampaignResult = await campaignFactory.methods.createCampaign(\n        tokenSupply,\n        tokenName,\n        tokenSymbol,\n        this.convertDateToSeconds(campaignOpeningTime),\n        this.convertDateToSeconds(campaignClosingTime),\n        web3.utils.toWei(etherToCollect, 'ether')\n      ).send({ from: account.toString().toLowerCase() });\n\n      let roundDetails = this.props.location.newRound;\n      let campaignAddressRaw = createCampaignResult.events[1].raw.data;\n      let campaignAddress = campaignAddressRaw.replace(zeros, \"0x\");\n\n      roundDetails.id = campaignAddress;\n      \n      console.log(roundDetails);\n\n      await API.graphql(graphqlOperation(CreateRoundDetails, { input: roundDetails }))\n      console.log(\"Campaña creada!\");\n      this.setState({ campaignAddress: campaignAddress });\n    } \n    catch (err) \n    {\n      this.setState({ errorMessage: err.message });\n    }\n\n    this.setState({ loading: false, finish: true });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.finish\n        ? (\n          <Segment>\n            <h1>La Campaña ha sido creada.</h1>\n            <h1>La dirección es</h1>\n            <h1>{this.state.campaignAddress}</h1>\n            <h1>Puedes consultar los detalles en siguiente\n              <Link to={`/roundDetails/${this.state.campaignAddress}`}>\n                enlace                   \n              </Link>\n            </h1>\n          </Segment>\n          )\n        : \n          ( this.state.loading\n            ? (\n              // <Button fluid basic size='massive' loading={this.state.loading}/>\n              <Segment style={{height: \"500px\"}}>\n                <Dimmer active inverted>\n                  <Loader size='massive' inverted>Loading</Loader>\n                </Dimmer>\n              </Segment>\n              )\n            : (\n              <Segment>\n              <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n                \n                <Header as='h2' icon textAlign='center'>\n                  <Icon name='cny' circular />\n                  <Header.Content>Creacion de la Campaña</Header.Content>\n                </Header>\n\n                <Form.Field>\n                  <Input labelPosition='right' type='text' placeholder='Amount'>\n                    <Label basic>¿Cuánto ETH se desea recaudar? </Label>\n                      <input\n                        name='etherToCollect'\n                        onChange={this.onChange}\n                        value={this.state.etherToCollect}\n                        placeholder=''\n                        type=\"number\"\n                        min=\"0\"\n                      />\n                    <Label><Icon name='ethereum'/></Label>\n                  </Input>\n                </Form.Field>\n\n                <Form.Field>\n                  <Input labelPosition='right' type='text' placeholder='Amount'>\n                    <Label basic>¿Qué nombre deseas darle a tu TOKEN? </Label>\n                      <input\n                        name='tokenName'\n                        onChange={this.onChange}\n                        value={this.state.tokenName}\n                        placeholder=''\n                        type=\"text\"\n                        maxLength=\"10\"\n                      />\n                    <Label><Icon name='cny'/></Label>\n                  </Input>\n                </Form.Field>\n\n                <Form.Field>\n                  <Input labelPosition='right' type='text' placeholder='Amount'>\n                    <Label basic>Indica el simbolo de  </Label>\n                      <input\n                        name='tokenSymbol'\n                        onChange={this.onChange}\n                        value={this.state.tokenSymbol}\n                        placeholder=''\n                        type='text'\n                        maxLength=\"3\"\n                      />\n                    <Label><Icon name='cny'/></Label>\n                  </Input>\n                </Form.Field>\n\n                <Form.Field>\n                  <Input labelPosition='right' type='text' placeholder='Amount'>\n                    <Label basic>Indica la cantidad de TOKEN que deseas generar</Label>\n                      <input\n                        name='tokenSupply'\n                        onChange={this.onChange}\n                        value={this.state.tokenSupply}\n                        placeholder=''\n                        type=\"number\"\n                        min=\"0\"\n                      />\n                    <Label></Label>\n                  </Input>\n                </Form.Field>\n\n                <Form.Field>\n                  <Input labelPosition='right' type='text' placeholder='Amount'>\n                    <Label basic>1 ETH equivale</Label>\n                      <input\n                        name='tokenValue'\n                        onChange={this.onChange}\n                        value={(this.state.etherToCollect/this.state.tokenSupply).toString()}\n                        placeholder=''\n                        type=\"number\"\n                        readOnly\n                      />\n                    <Label>TOKEN</Label>\n                  </Input>\n                </Form.Field>\n\n                <Form.Group widths='equal'>\n                  <Form.Field>\n                    <Label basic>Fecha de Inicio</Label>\n                    <DateTimePicker\n                      minDate={new Date()}\n                      onChange={this.openingTimeHandler}\n                      value={this.state.campaignOpeningTime}\n                    />\n                  </Form.Field>\n                  <Form.Field >\n                    <Label basic>Fecha de Cierre</Label> \n                    <DateTimePicker\n                      minDate={new Date()}\n                      onChange={this.closingTimeHandler}\n                      value={this.state.campaignClosingTime}\n                    />\n                  </Form.Field>\n                </Form.Group>\n\n\n                <Message error header=\"Oops!\" content={this.state.errorMessage} />\n                <Button color='green'>\n                  Create Campaing!\n                </Button>\n              </Form> \n              </Segment>\n              )\n          )\n        }\n        \n        \n      </div>\n    )\n  }\n}\n\nexport default InvestPage;","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/CreateCampaignPage.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/InvestPage.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/campaign.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":129,"column":66,"nodeType":"78","messageId":"79","endLine":129,"endColumn":73},{"ruleId":"76","severity":1,"message":"80","line":65,"column":13,"nodeType":"78","messageId":"79","endLine":65,"endColumn":23},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'youtube' is assigned a value but never used.","Identifier","unusedVar","'tokenValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]