[{"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/index.js":"1","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/aws-exports.js":"2","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/App.js":"3","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/layout.js":"4","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/header.js":"5","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/HomePage.js":"6","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/RoundDetailsPage.js":"7","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/web3.js":"8","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/campaignFactory.js":"9","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/graphql/queries.js":"10","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/graphql/mutations.js":"11","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/CreateRoundPage.js":"12","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/CreateCampaignPage.js":"13","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/InvestPage.js":"14","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/campaign.js":"15","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/constants/questions.js":"16","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/footer.js":"17"},{"size":319,"mtime":1609935754320,"results":"18","hashOfConfig":"19"},{"size":496,"mtime":1618077872498,"results":"20","hashOfConfig":"19"},{"size":363,"mtime":1613408549894,"results":"21","hashOfConfig":"19"},{"size":1041,"mtime":1613556808838,"results":"22","hashOfConfig":"19"},{"size":800,"mtime":1613556903649,"results":"23","hashOfConfig":"19"},{"size":1408,"mtime":1617530173457,"results":"24","hashOfConfig":"19"},{"size":8208,"mtime":1617550328687,"results":"25","hashOfConfig":"19"},{"size":128,"mtime":1613817202259,"results":"26","hashOfConfig":"19"},{"size":227,"mtime":1613817194980,"results":"27","hashOfConfig":"19"},{"size":1038,"mtime":1618077838540,"results":"28","hashOfConfig":"19"},{"size":1585,"mtime":1618077838958,"results":"29","hashOfConfig":"19"},{"size":8177,"mtime":1617531876022,"results":"30","hashOfConfig":"19"},{"size":9277,"mtime":1615130974658,"results":"31","hashOfConfig":"19"},{"size":3137,"mtime":1617442120896,"results":"32","hashOfConfig":"19"},{"size":192,"mtime":1609936669050,"results":"33","hashOfConfig":"19"},{"size":588,"mtime":1613514280423,"results":"34","hashOfConfig":"19"},{"size":673,"mtime":1613556862366,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"3salhw",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/index.js",[],["73","74"],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/aws-exports.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/App.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/layout.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/header.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/HomePage.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/RoundDetailsPage.js",["75","76","77"],"import React, { Component } from 'react';\nimport { getRoundDetails } from '.././graphql/queries';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport web3 from '../ethereum/web3.js';\nimport Campaign from '../ethereum/campaign';\nimport { Link } from 'react-router-dom';\nimport { Grid, Divider, Button, Segment, Container, Header, Icon } from 'semantic-ui-react';\n\n\nclass RoundDetailsPage extends Component {\n\n  state = {\n    weiRaise: '',\n    goal: '',\n    openingTime: new Date().getTime().toString(),\n    closingTime: new Date().getTime().toString(),\n    details: {\n      companyName: '', \n      email: '', \n      url: '', \n      direction: '', \n      companyDescription: '', \n      youtube: '', \n      membersNames: [''], \n      membersLinkedin: [''], \n      bussinesModel: '', \n      roundPurpose: '',\n      id: '',\n      tokenValue: ''\n    }\n  }\n\n  async componentDidMount() {\n\n    const campaignID = this.props.match.params.id;\n\n    try {\n      const campaign = Campaign(campaignID, web3);\n      const weiRaise = await campaign.methods.weiRaised().call();\n      const goal = await campaign.methods.cap().call();\n      const openingTime = await campaign.methods.openingTime().call();\n      const closingTime = await campaign.methods.closingTime().call();\n\n      this.setState({ weiRaise, goal, openingTime, closingTime });\n      console.log(\"Ethereum Data: \" + weiRaise, goal, openingTime, closingTime);\n    } \n    catch (err) \n    {\n      console.log('error fetching data from Ethereum...', err)\n    }\n\n    try \n    {\n      console.log(\"Props Data \", this.props.match );\n      const roundsData = await API.graphql(graphqlOperation(getRoundDetails, { id: this.props.match.params.id }));\n      console.log(\"GraphQl Data: \", roundsData.data.getRoundDetails);\n      this.setState({ details : roundsData.data.getRoundDetails });\n    } \n    catch (err) \n    {\n      console.log('error fetching data from GraphQL...', err)\n    }\n  }\n\n  renderMembers = (names, linkedins) => {\n    \n    console.log(names, linkedins); //error aqui\n\n    if(names === undefined || linkedins === undefined)\n    {\n      return <div>loading</div>\n    }\n    else{\n      const members = names.map( (name, index) => {\n        let lbl = \"\" + name + index;\n        return (           \n            <Grid.Column key={lbl}>\n              <div \n                className=\"LI-profile-badge\"  \n                data-version=\"v1\" \n                data-size=\"medium\" \n                data-locale=\"es_ES\" \n                data-type=\"vertical\" \n                data-theme=\"dark\" \n                data-vanity=\"aldemaro-gonzalez\"\n              >\n                <a \n                  className=\"LI-simple-link\" \n                  href='https://es.linkedin.com/in/aldemaro-gonzalez?trk=profile-badge'\n                > \n                  {name}\n                </a>\n              </div>\n            </Grid.Column>\n        )\n      });\n      return members;\n    }\n  };\n  \n  getStringFecha = (date) => {\n    let dat = new Date(parseInt(date));\n    let day = dat.getDay();\n    let month = dat.getMonth();\n    let year = dat.getFullYear();\n\n    let hour = dat.getHours();\n    let min = dat.getMinutes();\n\n    return ( (day+1) + '/' + month + '/' + year + '\\n' + hour + ':' + min );\n\n  }\n\n  render()\n  {\n    let { companyName, email, url, direction, companyDescription, youtube, membersNames, membersLinkedin, bussinesModel, roundPurpose, id, tokenValue } = this.state.details;\n    let { weiRaise, goal, openingTime, closingTime } = this.state;\n\n    return ( \n      <Segment>\n        <script type=\"text/javascript\" src=\"https://platform.linkedin.com/badges/js/profile.js\" async defer></script>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column textAlign=\"center\">\n              <h2>{companyName}</h2>\n            </Grid.Column>\n          </Grid.Row>\n        \n          <Grid.Row>\n            <Grid.Column textAlign=\"center\">\n\n              <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-AoFMcOHlpY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n              \n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n\n        <Divider\n          as='h4'\n          className='header'\n          horizontal\n          style={{ margin: '3em 0em', textTransform: 'uppercase' }}\n        >\n          <Icon style={{ 'marginRight': '0'}} name=\"angle down\"/>\n        </Divider>\n      \n        <Grid celled='internally' columns='equal' stackable>\n          <Grid.Row textAlign='center'>\n            <Grid.Column style={{ paddingBottom: '5em', paddingTop: '5em' }}>\n              <Header as='h3' style={{ fontSize: '2em' }}>\n                Descripción de la Idea\n              </Header>\n              <h4 style={{ fontSize: '1.33em' }}>{companyDescription}</h4>\n            </Grid.Column>\n              \n            <Grid.Column style={{ paddingBottom: '5em', paddingTop: '5em' }}>\n              <Header as='h3' style={{ fontSize: '2em' }}>\n                Detalles de la Ronda\n              </Header>\n                <h4>ETH Recaudado: {web3.utils.fromWei(weiRaise)}</h4> \n                <h4>ETH Meta: {web3.utils.fromWei(goal)}</h4>\n                <h4>Fecha de Inicio: {this.getStringFecha(openingTime*1000)}</h4>\n                <h4>Fecha de Fin: {this.getStringFecha(closingTime*1000)}</h4>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Divider\n            as='h1'\n            className='header'\n            horizontal\n            style={{ margin: '3em 0em', textTransform: 'uppercase' }}\n          >\n            Información de la Empresa\n        </Divider>\n\n        <Container text>\n          <Grid>\n          <Grid.Row columns='12'>\n            <Grid.Column textAlign=\"center\" width='4'>\n              EMAIL: <h4>{email}</h4>\n            </Grid.Column>\n            <Grid.Column textAlign=\"center\" width='5'>\n              URL: <h4>{url}</h4>\n            </Grid.Column>\n            <Grid.Column textAlign=\"center\" width='3'>\n              Direccion: <h4>{direction}</h4>\n            </Grid.Column>\n          </Grid.Row>\n          </Grid>\n\n          <Divider\n            as='h1'\n            className='header'\n            horizontal\n            style={{ margin: '3em 0em', textTransform: 'uppercase' }}\n          >\n            Equipo\n          </Divider>\n          \n          <Grid>\n            <Grid.Row columns='2'>\n              {this.renderMembers(membersNames, membersLinkedin)}\n            </Grid.Row>\n          </Grid>\n\n        {/* <Divider\n          as='h1'\n          className='header'\n          horizontal\n          style={{ margin: '3em 0em', textTransform: 'uppercase' }}\n        > */}\n          {/* Detalles\n        </Divider> */}\n\n        {/* <Grid celled='internally' columns='equal' stackable>\n          <Grid.Row textAlign='center'>\n            <Grid.Column style={{ paddingBottom: '5em', paddingTop: '5em' }}>\n              <Header as='h3' style={{ fontSize: '2em' }}>\n                Modelo de Negocio\n              </Header>\n              <p style={{ fontSize: '1.33em' }}>{bussinesModel}</p>\n            </Grid.Column>\n            <Grid.Column style={{ paddingBottom: '5em', paddingTop: '5em' }}>\n              <Header as='h3' style={{ fontSize: '2em' }}>\n                Propósito de la Ronda\n              </Header>\n              {roundPurpose}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid> */}\n\n        </Container>\n\n        <Button \n          size='massive' \n          style={\n            { \n              position: \"fixed\",\n              margin: \"2em\",\n              bottom: \"0px\",\n              left: \"0px\",\n              animation: \"1.5s ease-in-out 0s infinite normal none running back-to-docs\",\n            }\n          }\n          color='green'\n        >\n          <Link \n            style={{color: 'white'}}\n            to={{\n              pathname: `/${id}/invest`,\n              roundDetails: {\n                companyName,\n                tokenValue\n              } \n            }}\n          >\n            Invertir\n          </Link>\n        </Button>\n      </Segment>)\n  }\n\n}\n\n\n\nexport default RoundDetailsPage;","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/web3.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/campaignFactory.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/graphql/queries.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/graphql/mutations.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/CreateRoundPage.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/CreateCampaignPage.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/containers/InvestPage.js",["78","79"],"import React, { Component } from 'react';\nimport { Grid, Message, Segment, Button, Form, Input, Label, Icon} from 'semantic-ui-react';\nimport web3 from '../ethereum/web3.js';\n\nclass InvestPage extends Component {\n\n  state = {\n    etherToSend: '',\n    tokenValue: this.props.location.roundDetails.tokenValue\n  }\n\n  onChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  onSubmit = async () => {\n\n    const account = await window.ethereum.request(\n      { method: 'eth_requestAccounts' }\n    );\n  \n    let wei = web3.utils.toWei(this.state.etherToSend, 'ether');\n\n    const transactionParameters = {\n      to: this.props.match.params.id, \n      from: account[0], \n      value: web3.utils.toHex(wei)\n    };\n\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters],\n    });\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <Segment>\n          <Form onSubmit={this.onSubmit}>\n            <Grid>\n              <Grid.Row>\n                <Grid.Column textAlign=\"center\">\n                  <h1>{this.props.location.roundDetails.companyName}</h1>\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Column textAlign=\"center\">\n                  <h2>Wallet Address: {this.props.match.params.id} </h2>\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Column textAlign=\"center\">\n                  <Form.Field>\n                    <Input labelPosition='right' type='text' placeholder=''>\n                      <Label basic>¿Cuánto ETH se desea aportar? </Label>\n                        <input\n                          name='etherToSend'\n                          onChange={this.onChange}\n                          value={this.state.etherToSend}\n                          placeholder=''\n                          type=\"number\"\n                          min=\"0\"\n                        />\n                      <Label><Icon name='ethereum'/></Label>\n                    </Input>\n                  </Form.Field>\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Column textAlign=\"center\">\n                  <Input labelPosition='right' type='text' placeholder='Amount'>\n                    <Label basic>Token a recibir </Label>\n                      <input\n                        name='tokenRatio'                       \n                        value={this.state.etherToSend / this.state.tokenValue}\n                        type=\"text\"\n                        readOnly\n                      />\n                    <Label><Icon name='cny'/></Label>\n                  </Input>\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Column textAlign=\"center\">\n                  <Button color='green'>\n                    Invertir\n                  </Button>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Form>\n        </Segment>\n      </div>\n    )\n  }\n}\n  \nexport default InvestPage;","/Users/aldemarogonzalez/Desktop/TFG/tfg/src/ethereum/campaign.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/constants/questions.js",[],"/Users/aldemarogonzalez/Desktop/TFG/tfg/src/components/footer.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":116,"column":67,"nodeType":"86","messageId":"87","endLine":116,"endColumn":74},{"ruleId":"84","severity":1,"message":"88","line":116,"column":107,"nodeType":"86","messageId":"87","endLine":116,"endColumn":120},{"ruleId":"84","severity":1,"message":"89","line":116,"column":122,"nodeType":"86","messageId":"87","endLine":116,"endColumn":134},{"ruleId":"84","severity":1,"message":"90","line":2,"column":16,"nodeType":"86","messageId":"87","endLine":2,"endColumn":23},{"ruleId":"84","severity":1,"message":"91","line":30,"column":11,"nodeType":"86","messageId":"87","endLine":30,"endColumn":17},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'youtube' is assigned a value but never used.","Identifier","unusedVar","'bussinesModel' is assigned a value but never used.","'roundPurpose' is assigned a value but never used.","'Message' is defined but never used.","'txHash' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]